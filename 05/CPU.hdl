// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Instruction is either:
    // A: 0VVV VVVV VVVV VVVV
    // C: 111A CCCC CCDD DJJJ

    // Use most significant bit to determine whether the ALU output
    // or the incoming instruction is to be loaded into the A-REG.
    And(a=instruction[15],b=instruction[5],out=loadALU);
    Mux16(a=instruction,b=inputA,sel=loadALU,out=inAREG);

    // Load (or do not load) selected value into the A-REG.
    // If A instruction, always load.
    // If C instruction, only load if DDD = 1DD.
    Not(in=instruction[15],out=isA);
    Or(a=isA,b=loadALU,out=loadA);
    ARegister(in=inAREG,load=loadA,out=outAREG,out[0..14]=addressM,out=inPC);

    // Select either A or M using the A bit of the C instruction.
    Mux16(a=outAREG,b=inM,sel=instruction[12],out=AorM);

    // Load correct inputs into the ALU.
    ALU(x=outD,y=AorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=inputD,out=inputA,out=outM,zr=isZR,ng=isNG);

    // Route ALUout to D-REG.
    And(a=instruction[15],b=instruction[4],out=loadD);
    DRegister(in=inputD,load=loadD,out=outD);

    // Route writeM signal.
    And(a=instruction[15],b=instruction[3],out=writeM);

    // Jump?
    Or(a=isZR,b=isNG,out=isZRorNG);
    Not(in=isZRorNG,out=isPS);          // is positive

    And(a=isPS,b=instruction[0],out=J3);
    And(a=isZR,b=instruction[1],out=J2);
    And(a=isNG,b=instruction[2],out=J1);

    Or(a=J1,b=J2,out=J1orJ2);
    Or(a=J1orJ2,b=J3,out=JMP);

    And(a=instruction[15],b=JMP,out=loadPC);
    Not(in=loadPC,out=incPC);

    // Route PC signals.
    PC(in=inPC,load=loadPC,inc=incPC,reset=reset,out[0..14]=pc);
}